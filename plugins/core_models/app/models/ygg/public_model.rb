#
# Copyright (C) 2008-2015, Daniele Orlandi
#
# Author:: Daniele Orlandi <daniele@orlandi.com>
#
# License:: You can redistribute it and/or modify it under the terms of the LICENSE file.
#

module Ygg

#
# Any derived model of this kind will be exposed in public trough api, web gui, other
#
class PublicModel < YggModel

  self.abstract_class = true

  def self.search(str)
    raise "Please implement a searcher method"
  end

  def abstract_for_search
    to_s
  end

  class_attribute :has_handle_attribute
  class_attribute :has_handle_options

  # Defines autogeneration of a handle attribute from other attributes
  #
  # @param [Symbol] attribute   Attribute in which to store the autogenerated handle
  # @param [Hash]   options     Optional options hash:
  #                               [:from]      Array of attributes from which to generate the handle
  #                               [:generator] A block digesting attributes and producting a handle prefix
  #
  # Method accepts a block that will be assigned to options[:generator]
  #
  def self.has_handle(attribute, options = {}, &block)

    options[:generator] ||= block || nil

    self.has_handle_attribute = attribute
    self.has_handle_options = options

    before_save do
      if (!read_attribute(self.has_handle_attribute))

        joined_fields = self.has_handle_options[:from].map { |f| self.read_attribute f }.join(' ')
        prefix = self.class.method(:generate_handle_prefix_with_initials).call(joined_fields)
        unless self.class.has_handle_options[:generator].nil?
          prefix = self.class.has_handle_options[:generator].call(prefix, joined_fields)
        end
        handle = self.class.find_first_free_handle(prefix)

        write_attribute self.class.has_handle_attribute, handle
      end
    end
  end

  def self.find_first_free_handle(prefix)
    for i in 0..1000 do
      handle = prefix + (i > 0 ? i.to_s : '')
      return handle if !self.send("find_by_#{self.has_handle_attribute}".to_sym, handle)
    end

    raise 'Too many handles with same prefix'
  end

  def self.generate_handle_prefix_with_initials(joined_fields)
    joined_fields.split(' ').map { |x|
      y = x.upcase.gsub(/[^A-Z]/, '')
      y = y.length > 0 ? (y[0] + y[1..-1].tr('AEIOU', '')) : ''
      y
    }.join('')[0..5]
  end

end

end
